// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}



// TODO: receipt models // all needed models 
model StudentProfile  {
  id                String @unique @db.VarChar(256)
  // isTeacher         Boolean @default(false)
  IIN               String? @db.Text
  activeCourses     Course[]
  
  // membership        StudentMembership?
  receipts          Receipts[]
}

// if student.isActive != isActive {
//   axios.put(`/api/students/${studentId}/update)
// }

// model StudentMembership {
//     id                    String @id @unique @default(uuid())
//     StudentProfileId        String
//     StudentProfile          StudentProfile @relation(fields: [StudentProfileId], references: [id]) 

//     // @@index([id])
//     @@index([StudentProfileId])
// }

model Receipts {
    id                String @id @default(uuid())
    receiptUrl        String
    userId            String
    uploadedAt        DateTime @db.DateTime()

    StudentProfileId        String?
    StudentProfile          StudentProfile? @relation(fields: [StudentProfileId], references: [id]) 
    
    @@index([StudentProfileId])
}

model Course {
    id                String @id @default(uuid())
    userId            String
    title             String @db.Text
    description       String? @db.Text
    imageUrl          String? @db.Text
    price             Float?
    isPublished       Boolean @default(false)

  categoryId        String?
  category          Category? @relation(fields: [categoryId], references: [id])

  StudentProfileId     String?
  StudentProfile       StudentProfile? @relation(fields: [StudentProfileId], references: [id])

  chapters          Chapter[]
  attachments       Attachment[]
  purchases         Purchase[]

  createdAt         DateTime @default(now())
  updateAt          DateTime @updatedAt

  @@index([categoryId])
  @@index([StudentProfileId])
  @@fulltext([title])
}

model Category {
  id                String @id @default(uuid())
  name              String @unique
  courses           Course[]
}

model Attachment {
  id                String @id @default(uuid())
  name              String
  url               String @db.Text

  courseId          String
  course            Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([courseId])
}

model Chapter {
  id String @id @default(uuid())
  title String
  description String? @db.Text
  videoUrl String? @db.Text
  position Int
  isPublished Boolean @default(false)
  isFree Boolean @default(false)

  muxData MuxData?

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt()

  @@index([courseId])
}

model MuxData {
  id String @id @default(uuid())
  assetId String
  playbackId String?

  chapterId String @unique
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id String @id @default(uuid())
  userId String
  
  chapterId String
  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt()

  @@index([chapterId])
  @@unique([userId, chapterId])
}

model Purchase {
  id String @id @default(uuid())
  userId String

  courseId String
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updateAt DateTime @updatedAt()

  @@index([courseId])
  @@unique([userId, courseId])
}

model StripeCustomer {
  id String @id @default(uuid())
  userId String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}